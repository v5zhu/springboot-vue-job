<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wim.quartz.business.dao.SyncRecordErrorMapper">
    <resultMap id="BaseResultMap" type="com.wim.quartz.business.entity.SyncRecordError">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="sync_id" jdbcType="BIGINT" property="syncId"/>
        <result column="dict_code" jdbcType="VARCHAR" property="dictCode"/>
        <result column="record_error_code" jdbcType="VARCHAR" property="recordErrorCode"/>
        <result column="order" jdbcType="INTEGER" property="order"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, sync_id, dict_code, record_error_code, `order`
  </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from bdc_sync_record_error
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from bdc_sync_record_error
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="com.wim.quartz.business.entity.SyncRecordError">
    insert into bdc_sync_record_error (id, sync_id, dict_code, 
      record_error_code, `order`)
    values (#{id,jdbcType=BIGINT}, #{syncId,jdbcType=BIGINT}, #{dictCode,jdbcType=VARCHAR}, 
      #{recordErrorCode,jdbcType=VARCHAR}, #{order,jdbcType=INTEGER})
  </insert>
    <insert id="insertSelective" parameterType="com.wim.quartz.business.entity.SyncRecordError">
        insert into bdc_sync_record_error
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="syncId != null">
                sync_id,
            </if>
            <if test="dictCode != null">
                dict_code,
            </if>
            <if test="recordErrorCode != null">
                record_error_code,
            </if>
            <if test="order != null">
                `order`,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="syncId != null">
                #{syncId,jdbcType=BIGINT},
            </if>
            <if test="dictCode != null">
                #{dictCode,jdbcType=VARCHAR},
            </if>
            <if test="recordErrorCode != null">
                #{recordErrorCode,jdbcType=VARCHAR},
            </if>
            <if test="order != null">
                #{order,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.wim.quartz.business.entity.SyncRecordError">
        update bdc_sync_record_error
        <set>
            <if test="syncId != null">
                sync_id = #{syncId,jdbcType=BIGINT},
            </if>
            <if test="dictCode != null">
                dict_code = #{dictCode,jdbcType=VARCHAR},
            </if>
            <if test="recordErrorCode != null">
                record_error_code = #{recordErrorCode,jdbcType=VARCHAR},
            </if>
            <if test="order != null">
                `order` = #{order,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.wim.quartz.business.entity.SyncRecordError">
    update bdc_sync_record_error
    set sync_id = #{syncId,jdbcType=BIGINT},
      dict_code = #{dictCode,jdbcType=VARCHAR},
      record_error_code = #{recordErrorCode,jdbcType=VARCHAR},
      `order`= #{order,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
    <select id="findListBySyncId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from bdc_sync_record_error where sync_id=#{syncId}
        order by `order` asc
    </select>
</mapper>